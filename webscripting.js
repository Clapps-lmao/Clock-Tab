let is12HourFormat = true;
let is24HourFormat = false;
function updateClock() {
    const clockElement = document.querySelector('.clock-text');
    const currentTime = new Date();
    let hours = currentTime.getHours();
    const minutes = currentTime.getMinutes().toString().padStart(2, '0');
    const seconds = currentTime.getSeconds().toString().padStart(2, '0');
    let ampm = hours >= 12 ? 'PM' : 'AM'; // Determine AM/PM

    if (!is12HourFormat) {
        // Use 24-hour format
        hours = hours.toString().padStart(2, '0');
        ampm = ''; // Clear AM/PM for 24-hour format
    } else {
        // Use 12-hour format
        if (hours > 12) {
            hours -= 12;
        }

        if (hours === 0) {
            hours = 12;
        }

        hours = hours.toString().padStart(2, '0');
    }

    const timeString = `${hours}:${minutes}:${seconds} ${ampm}`;
    clockElement.textContent = timeString;
}




updateClock();
setInterval(updateClock, 1000);

function changeTimeFormat() {
    const selectedFormat = document.getElementById('time-format-select').value;
    
    if (selectedFormat === '12') {
        // Set 12-hour format
        is12HourFormat = true;
    } else {
        // Set 24-hour format
        is12HourFormat = false;
        updateClock(); // Add this line to update the clock immediately
    }

    // Update the clock immediately (move this line to the 24-hour block if you want)
    updateClock();
}

// Global variable to track temperature units
let isCelsius = false; // Initially set to Fahrenheit

// Function to toggle between Celsius and Fahrenheit
function toggleTemperatureUnits() {
isCelsius = !isCelsius; // Toggle the units
const toggleButton = document.getElementById('toggle-units');

if (isCelsius) {
    // Switch to Celsius
    toggleButton.textContent = 'Change to Fahrenheit';
    // Call a function to convert and update temperatures to Celsius
    convertAndDisplayTemperaturesToCelsius();
} else {
    // Switch to Fahrenheit
    toggleButton.textContent = 'Change to Celsius';
    // Call a function to convert and update temperatures to Fahrenheit
    convertAndDisplayTemperaturesToFahrenheit();
}
}

function convertAndDisplayTemperaturesToCelsius() {
    const temperatureElements = document.querySelectorAll('.temperature');

    temperatureElements.forEach((element) => {
        const temperatureInFahrenheit = element.getAttribute('data-temperatureFahrenheit');
        if (temperatureInFahrenheit !== null) {
            const temperatureInCelsius = Math.round((parseFloat(temperatureInFahrenheit) - 32) * (5 / 9));
            element.setAttribute('data-temperatureCelsius', temperatureInCelsius);
            element.textContent = `Temperature: ${temperatureInCelsius} Â°C`;
        }
    });
}

function convertAndDisplayTemperaturesToFahrenheit() {
    const temperatureElements = document.querySelectorAll('.temperature');

    temperatureElements.forEach((element) => {
        const temperatureInCelsius = element.getAttribute('data-temperatureCelsius');
        if (temperatureInCelsius !== null) {
            const temperatureInFahrenheit = Math.round((parseFloat(temperatureInCelsius) * 9 / 5) + 32);
            element.setAttribute('data-temperatureFahrenheit', temperatureInFahrenheit);
            element.textContent = `Temperature: ${temperatureInFahrenheit} Â°F`;
        }
    });
}





function getUserLocation() {
    return fetch('https://ipinfo.io?token=cc98be8f188a9a')
        .then(response => response.json())
        .then(data => {
        const locationArray = data.loc.split(',');
        const city = data.city;
        const country = data.country;

        return { city, country };
        })
        .catch(error => {
            console.error('Error getting user location:', error);
            return null;
        });
}

function updateWeather(city, country) {
    const weatherElement = document.querySelector('.weather');
    const cityElement = document.querySelector('.city-text');
    const apiKey = "c152eb69aece48a8817210931232509"; // Replace with your actual WeatherAPI API key
    const apiUrl = `https://api.weatherapi.com/v1/current.json?key=${apiKey}&q=${city}`;

    // Map of country codes to their abbreviations
    const countryAbbreviations = {
        'United States of America': 'ğŸ‡ºğŸ‡¸ USA',
        'Afghanistan': 'ğŸ‡¦ğŸ‡« AF',
        'Albania': 'ğŸ‡¦ğŸ‡± AL',
        'Algeria': 'ğŸ‡©ğŸ‡¿ DZ',
        'Andorra': 'ğŸ‡¦ğŸ‡© AD',
        'Angola': 'ğŸ‡¦ğŸ‡´ AO',
        'Antigua and Barbuda': 'ğŸ‡¦ğŸ‡¬ AG',
        'Argentina': 'ğŸ‡¦ğŸ‡· AR',
        'Armenia': 'ğŸ‡¦ğŸ‡² AM',
        'Australia': 'ğŸ‡¦ğŸ‡º AU',
        'Austria': 'ğŸ‡¦ğŸ‡¹ AT',
        'Azerbaijan': 'ğŸ‡¦ğŸ‡¿ AZ',
        'Bahamas': 'ğŸ‡§ğŸ‡¸ BS',
        'Bahrain': 'ğŸ‡§ğŸ‡­ BH',
        'Bangladesh': 'ğŸ‡§ğŸ‡© BD',
        'Barbados': 'ğŸ‡§ğŸ‡§ BB',
        'Belarus': 'ğŸ‡§ğŸ‡¾ BY',
        'Belgium': 'ğŸ‡§ğŸ‡ª BE',
        'Belize': 'ğŸ‡§ğŸ‡¿ BZ',
        'Benin': 'ğŸ‡§ğŸ‡¯ BJ',
        'Bhutan': 'ğŸ‡§ğŸ‡¹ BT',
        'Bolivia': 'ğŸ‡§ğŸ‡´ BO',
        'Bosnia and Herzegovina': 'ğŸ‡§ğŸ‡¦ BA',
        'Botswana': 'ğŸ‡§ğŸ‡¼ BW',
        'Brazil': 'ğŸ‡§ğŸ‡· BR',
        'Brunei': 'ğŸ‡§ğŸ‡³ BN',
        'Bulgaria': 'ğŸ‡§ğŸ‡¬ BG',
        'Burkina Faso': 'ğŸ‡§ğŸ‡« BF',
        'Burundi': 'ğŸ‡§ğŸ‡® BI',
        'Cabo Verde': 'ğŸ‡¨ğŸ‡» CV',
        'Cambodia': 'ğŸ‡°ğŸ‡­ KH',
        'Cameroon': 'ğŸ‡¨ğŸ‡² CM',
        'Canada': 'ğŸ‡¨ğŸ‡¦ CA',
        'Central African Republic': 'ğŸ‡¨ğŸ‡« CF',
        'Chad': 'ğŸ‡¹ğŸ‡© TD',
        'Chile': 'ğŸ‡¨ğŸ‡± CL',
        'China': 'ğŸ‡¨ğŸ‡³ CN',
        'Colombia': 'ğŸ‡¨ğŸ‡´ CO',
        'Comoros': 'ğŸ‡°ğŸ‡² KM',
        'Congo': 'ğŸ‡¨ğŸ‡¬ CG',
        'Costa Rica': 'ğŸ‡¨ğŸ‡· CR',
        'Cote d\'Ivoire': 'ğŸ‡¨ğŸ‡® CI',
        'Croatia': 'ğŸ‡­ğŸ‡· HR',
        'Cuba': 'ğŸ‡¨ğŸ‡º CU',
        'Cyprus': 'ğŸ‡¨ğŸ‡¾ CY',
        'Czechia': 'ğŸ‡¨ğŸ‡¿ CZ',
        'Denmark': 'ğŸ‡©ğŸ‡° DK',
        'Djibouti': 'ğŸ‡©ğŸ‡¯ DJ',
        'Dominica': 'ğŸ‡©ğŸ‡² DM',
        'Dominican Republic': 'ğŸ‡©ğŸ‡´ DO',
        'Ecuador': 'ğŸ‡ªğŸ‡¨ EC',
        'Egypt': 'ğŸ‡ªğŸ‡¬ EG',
        'El Salvador': 'ğŸ‡¸ğŸ‡» SV',
        'Equatorial Guinea': 'ğŸ‡¬ğŸ‡¶ GQ',
        'Eritrea': 'ğŸ‡ªğŸ‡· ER',
        'Estonia': 'ğŸ‡ªğŸ‡ª EE',
        'Eswatini': 'ğŸ‡¸ğŸ‡¿ SZ',
        'Ethiopia': 'ğŸ‡ªğŸ‡¹ ET',
        'Fiji': 'ğŸ‡«ğŸ‡¯ FJ',
        'Finland': 'ğŸ‡«ğŸ‡® FI',
        'France': 'ğŸ‡«ğŸ‡· FR',
        'Gabon': 'ğŸ‡¬ğŸ‡¦ GA',
        'Gambia': 'ğŸ‡¬ğŸ‡² GM',
        'Georgia': 'ğŸ‡¬ğŸ‡ª GE',
        'Germany': 'ğŸ‡©ğŸ‡ª DE',
        'Ghana': 'ğŸ‡¬ğŸ‡­ GH',
        'Greece': 'ğŸ‡¬ğŸ‡· GR',
        'Grenada': 'ğŸ‡¬ğŸ‡© GD',
        'Guatemala': 'ğŸ‡¬ğŸ‡¹ GT',
        'Guinea': 'ğŸ‡¬ğŸ‡³ GN',
        'Guinea-Bissau': 'ğŸ‡¬ğŸ‡¼ GW',
        'Guyana': 'ğŸ‡¬ğŸ‡¾ GY',
        'Haiti': 'ğŸ‡­ğŸ‡¹ HT',
        'Honduras': 'ğŸ‡­ğŸ‡³ HN',
        'Hungary': 'ğŸ‡­ğŸ‡º HU',
        'Iceland': 'ğŸ‡®ğŸ‡¸ IS',
        'India': 'ğŸ‡®ğŸ‡³ IN',
        'Indonesia': 'ğŸ‡®ğŸ‡© ID',
        'Iran': 'ğŸ‡®ğŸ‡· IR',
        'Iraq': 'ğŸ‡®ğŸ‡¶ IQ',
        'Ireland': 'ğŸ‡®ğŸ‡ª IE',
        'Israel': 'ğŸ‡®ğŸ‡± IL',
        'Italy': 'ğŸ‡®ğŸ‡¹ IT',
        'Jamaica': 'ğŸ‡¯ğŸ‡² JM',
        'Japan': 'ğŸ‡¯ğŸ‡µ JP',
        'Jordan': 'ğŸ‡¯ğŸ‡´ JO',
        'Kazakhstan': 'ğŸ‡°ğŸ‡¿ KZ',
        'Kenya': 'ğŸ‡°ğŸ‡ª KE',
        'Kiribati': 'ğŸ‡°ğŸ‡® KI',
        'Korea (North)': 'ğŸ‡°ğŸ‡µ KP',
        'Korea (South)': 'ğŸ‡°ğŸ‡· KR',
        'Kosovo': 'ğŸ‡½ğŸ‡° XK',
        'Kuwait': 'ğŸ‡°ğŸ‡¼ KW',
        'Kyrgyzstan': 'ğŸ‡°ğŸ‡¬ KG',
        'Laos': 'ğŸ‡±ğŸ‡¦ LA',
        'Latvia': 'ğŸ‡±ğŸ‡» LV',
        'Lebanon': 'ğŸ‡±ğŸ‡§ LB',
        'Lesotho': 'ğŸ‡±ğŸ‡¸ LS',
        'Liberia': 'ğŸ‡±ğŸ‡· LR',
        'Libya': 'ğŸ‡±ğŸ‡¾ LY',
        'Liechtenstein': 'ğŸ‡±ğŸ‡® LI',
        'Lithuania': 'ğŸ‡±ğŸ‡¹ LT',
        'Luxembourg': 'ğŸ‡±ğŸ‡º LU',
        'Madagascar': 'ğŸ‡²ğŸ‡¬ MG',
        'Malawi': 'ğŸ‡²ğŸ‡¼ MW',
        'Malaysia': 'ğŸ‡²ğŸ‡¾ MY',
        'Maldives': 'ğŸ‡²ğŸ‡» MV',
        'Mali': 'ğŸ‡²ğŸ‡± ML',
        'Malta': 'ğŸ‡²ğŸ‡¹ MT',
        'Marshall Islands': 'ğŸ‡²ğŸ‡­ MH',
        'Mauritania': 'ğŸ‡²ğŸ‡· MR',
        'Mauritius': 'ğŸ‡²ğŸ‡º MU',
        'Mexico': 'ğŸ‡²ğŸ‡½ MX',
        'Micronesia': 'ğŸ‡«ğŸ‡² FM',
        'Moldova': 'ğŸ‡²ğŸ‡© MD',
        'Monaco': 'ğŸ‡²ğŸ‡¨ MC',
        'Mongolia': 'ğŸ‡²ğŸ‡³ MN',
        'Montenegro': 'ğŸ‡²ğŸ‡ª ME',
        'Morocco': 'ğŸ‡²ğŸ‡¦ MA',
        'Mozambique': 'ğŸ‡²ğŸ‡¿ MZ',
        'Myanmar': 'ğŸ‡²ğŸ‡² MM',
        'Namibia': 'ğŸ‡³ğŸ‡¦ NA',
        'Nauru': 'ğŸ‡³ğŸ‡· NR',
        'Nepal': 'ğŸ‡³ğŸ‡µ NP',
        'Netherlands': 'ğŸ‡³ğŸ‡± NL',
        'New Zealand': 'ğŸ‡³ğŸ‡¿ NZ',
        'Nicaragua': 'ğŸ‡³ğŸ‡® NI',
        'Niger': 'ğŸ‡³ğŸ‡ª NE',
        'Nigeria': 'ğŸ‡³ğŸ‡¬ NG',
        'North Macedonia': 'ğŸ‡²ğŸ‡° MK',
        'Norway': 'ğŸ‡³ğŸ‡´ NO',
        'Oman': 'ğŸ‡´ğŸ‡² OM',
        'Pakistan': 'ğŸ‡µğŸ‡° PK',
        'Palau': 'ğŸ‡µğŸ‡¼ PW',
        'Palestine': 'ğŸ‡µğŸ‡¸ PS',
        'Panama': 'ğŸ‡µğŸ‡¦ PA',
        'Papua New Guinea': 'ğŸ‡µğŸ‡¬ PG',
        'Paraguay': 'ğŸ‡µğŸ‡¾ PY',
        'Peru': 'ğŸ‡µğŸ‡ª PE',
        'Philippines': 'ğŸ‡µğŸ‡­ PH',
        'Poland': 'ğŸ‡µğŸ‡± PL',
        'Portugal': 'ğŸ‡µğŸ‡¹ PT',
        'Qatar': 'ğŸ‡¶ğŸ‡¦ QA',
        'Romania': 'ğŸ‡·ğŸ‡´ RO',
        'Russia': 'ğŸ‡·ğŸ‡º RU',
        'Rwanda': 'ğŸ‡·ğŸ‡¼ RW',
        'Saint Kitts and Nevis': 'ğŸ‡°ğŸ‡³ KN',
        'Saint Lucia': 'ğŸ‡±ğŸ‡¨ LC',
        'Saint Vincent and the Grenadines': 'ğŸ‡»ğŸ‡¨ VC',
        'Samoa': 'ğŸ‡¼ğŸ‡¸ WS',
        'San Marino': 'ğŸ‡¸ğŸ‡² SM',
        'Sao Tome and Principe': 'ğŸ‡¸ğŸ‡¹ ST',
        'Saudi Arabia': 'ğŸ‡¸ğŸ‡¦ SA',
        'Senegal': 'ğŸ‡¸ğŸ‡³ SN',
        'Serbia': 'ğŸ‡·ğŸ‡¸ RS',
        'Seychelles': 'ğŸ‡¸ğŸ‡¨ SC',
        'Sierra Leone': 'ğŸ‡¸ğŸ‡± SL',
        'Singapore': 'ğŸ‡¸ğŸ‡¬ SG',
        'Slovakia': 'ğŸ‡¸ğŸ‡° SK',
        'Slovenia': 'ğŸ‡¸ğŸ‡® SI',
        'Solomon Islands': 'ğŸ‡¸ğŸ‡§ SB',
        'Somalia': 'ğŸ‡¸ğŸ‡´ SO',
        'South Africa': 'ğŸ‡¿ğŸ‡¦ ZA',
        'South Sudan': 'ğŸ‡¸ğŸ‡¸ SS',
        'Spain': 'ğŸ‡ªğŸ‡¸ ES',
        'Sri Lanka': 'ğŸ‡±ğŸ‡° LK',
        'Sudan': 'ğŸ‡¸ğŸ‡© SD',
        'Suriname': 'ğŸ‡¸ğŸ‡· SR',
        'Sweden': 'ğŸ‡¸ğŸ‡ª SE',
        'Switzerland': 'ğŸ‡¨ğŸ‡­ CH',
        'Syria': 'ğŸ‡¸ğŸ‡¾ SY',
        'Taiwan': 'ğŸ‡¹ğŸ‡¼ TW',
        'Tajikistan': 'ğŸ‡¹ğŸ‡¯ TJ',
        'Tanzania': 'ğŸ‡¹ğŸ‡¿ TZ',
        'Thailand': 'ğŸ‡¹ğŸ‡­ TH',
        'Timor-Leste': 'ğŸ‡¹ğŸ‡± TL',
        'Togo': 'ğŸ‡¹ğŸ‡¬ TG',
        'Tonga': 'ğŸ‡¹ğŸ‡´ TO',
        'Trinidad and Tobago': 'ğŸ‡¹ğŸ‡¹ TT',
        'Tunisia': 'ğŸ‡¹ğŸ‡³ TN',
        'Turkey': 'ğŸ‡¹ğŸ‡· TR',
        'Turkmenistan': 'ğŸ‡¹ğŸ‡² TM',
        'Tuvalu': 'ğŸ‡¹ğŸ‡» TV',
        'Uganda': 'ğŸ‡ºğŸ‡¬ UG',
        'Ukraine': 'ğŸ‡ºğŸ‡¦ UA',
        'United Arab Emirates': 'ğŸ‡¦ğŸ‡ª AE',
        'United Kingdom': 'ğŸ‡¬ğŸ‡§ GB',
        'Uruguay': 'ğŸ‡ºğŸ‡¾ UY',
        'Uzbekistan': 'ğŸ‡ºğŸ‡¿ UZ'
    }    

    fetch(apiUrl)
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.json();
        })
        .then(data => {
            if (data.location && data.location.name && data.location.country) {
                const temperatureFahrenheit = Math.round(data.current.temp_f);
                const temperatureCelsius = Math.round(data.current.temp_c);

                // Get the abbreviated country name
                const abbreviatedCountry = countryAbbreviations[data.location.country] || data.location.country;

                // Store both Fahrenheit and Celsius temperatures in data attributes
                weatherElement.innerHTML = `<h3 class="temperature" data-temperatureFahrenheit="${temperatureFahrenheit}" data-temperatureCelsius="${temperatureCelsius}">Temperature: ${temperatureFahrenheit} Â°F</h3>`;
                cityElement.innerHTML = `<h3>Location: ${data.location.name}, ${data.location.region ? data.location.region + ', ' : ''}${abbreviatedCountry}</h3>`;
            } else {
                console.error('Error fetching weather data: Invalid API response');
            }
        })
        .catch(error => {
            console.error('Error fetching weather data:', error);
        });
}



getUserLocation().then(location => {
if (location) {
    updateWeather(location.city, location.country);
} else {
    console.error('Unable to determine user location.');
}
});

setInterval(() => {
getUserLocation().then(location => {
    if (location) {
        updateWeather(location.city, location.country);
    } else {
        console.error('Unable to determine user location.');
    }
});
}, 1800000);


// Function to open the settings modal
function openSettingsModal() {
const modal = document.getElementById('settings-modal');
modal.style.display = 'block';
}

// Function to close the settings modal
function closeSettingsModal() {
const modal = document.getElementById('settings-modal');
modal.style.display = 'none';
}

function openTimerModal() {
    const modal = document.getElementById('timer-modal');
    modal.style.display = 'block';
    }
    
    // Function to close the settings modal
    function closeTimerModal() {
    const modal = document.getElementById('timer-modal');
    modal.style.display = 'none';
    notificationAudio.pause();
    notificationAudio.currentTime = 0;
    }

// Function to open the settings modal
// Function to change the city and update time, weather, and location
function changeCity() {
const newCity = document.getElementById('new-city').value;
if (newCity) {
    // Close the modal
    closeSettingsModal();

    // Update the city in the UI
    const cityElement = document.querySelector('.city-text');
    cityElement.innerHTML = `<h3>Location: ${newCity}</h3>`;

    // Fetch weather and time for the new city (you'll need to modify your code)
    // Example: getUserLocation().then(location => updateWeatherAndTime(newCity, location.country));
}
}
function changeCity() {
const newCity = document.getElementById('new-city').value;
if (newCity) {
    // Close the modal
    closeSettingsModal();

    // Fetch weather data for the new city
    fetchWeather(newCity);
}

function fetchWeather(city) {
const apiKey = "c152eb69aece48a8817210931232509"; // Replace with your actual WeatherAPI API key
const apiUrl = `https://api.weatherapi.com/v1/current.json?key=${apiKey}&q=${city}`;

fetch(apiUrl)
    .then(response => {
        if (!response.ok) {
            throw new Error('Network response was not ok');
        }
        return response.json();
    })
    .then(data => {
        if (data.current) {
            const temperature = Math.round(data.current.temp_f);
            const description = data.current.condition.text;

            // Update the temperature in the UI
            const weatherElement = document.querySelector('.weather');
            weatherElement.innerHTML = `<h3 class="temperature" data-temperatureFahrenheit="${temperature}">Temperature: ${temperature} Â°F</h3>`;

            // Update the city in the UI
            const cityElement = document.querySelector('.city-text');
            cityElement.innerHTML = `<h3>Location: ${city}</h3>`;
        } else {
            console.error('Error fetching weather data: Invalid API response');
        }
    })
    .catch(error => {
        console.error('Error fetching weather data:', error);
    });
}
}

function updateTabTitle() {
    const currentTime = new Date();
    let hours = currentTime.getHours();
    const minutes = currentTime.getMinutes().toString().padStart(2, '0');
    const seconds = currentTime.getSeconds().toString().padStart(2, '0');
    let ampm = 'AM';

    if (!is12HourFormat) {
        // Use 24-hour format
        const timeString24 = `${hours}:${minutes}`;
        document.title = timeString24; // Set the tab title to the current time in 24-hour format
    } else {
        if (hours > 12) {
            hours -= 12;
            ampm = 'PM';
        }

        if (hours === 0) {
            hours = 12;
        }

        const timeString12 = `${hours}:${minutes} ${ampm}`;
        document.title = timeString12; // Set the tab title to the current time in 12-hour format
    }
}

    // Call the function to update the tab title initially
    updateTabTitle();

    // Set an interval to update the tab title every second
    setInterval(updateTabTitle, 1000);


//circle start
let progressBar = document.querySelector('.e-c-progress');
let indicator = document.getElementById('e-indicator');
let pointer = document.getElementById('e-pointer');
let length = Math.PI * 2 * 100;
progressBar.style.strokeDasharray = length;
function update(value, timePercent) {
  var offset = - length - length * value / (timePercent);
  progressBar.style.strokeDashoffset = offset; 
  pointer.style.transform = `rotate(${360 * value / (timePercent)}deg)`; 
};
//circle ends
const displayOutput = document.querySelector('.display-remain-time')
const pauseBtn = document.getElementById('pause');
const setterBtns = document.querySelectorAll('button[data-setter]');
let intervalTimer;
let timeLeft;
let wholeTime = 0.5 * 60; // manage this to set the whole time 
let isPaused = false;
let isStarted = false;

update(wholeTime,wholeTime); //refreshes progress bar
displayTimeLeft(wholeTime);
function changeWholeTime(seconds){
  if ((wholeTime + seconds) > 0){
    wholeTime += seconds;
    update(wholeTime,wholeTime);
  }
}
for (var i = 0; i < setterBtns.length; i++) {
    setterBtns[i].addEventListener("click", function(event) {
        var param = this.dataset.setter;
        switch (param) {
            case 'minutes-plus':
                changeWholeTime(1 * 60);
                break;
            case 'minutes-minus':
                changeWholeTime(-1 * 60);
                break;
            case 'seconds-plus':
                changeWholeTime(1);
                break;
            case 'seconds-minus':
                changeWholeTime(-1);
                break;
        }
      displayTimeLeft(wholeTime);
    });
}
function timer (seconds){ //counts time, takes seconds
  let remainTime = Date.now() + (seconds * 1000);
  displayTimeLeft(seconds);
  
  intervalTimer = setInterval(function(){
    timeLeft = Math.round((remainTime - Date.now()) / 1000);
    if(timeLeft < 0){
      clearInterval(intervalTimer);
      isStarted = false;
      setterBtns.forEach(function(btn){
        btn.disabled = false;
        btn.style.opacity = 1;
      });
      displayTimeLeft(wholeTime);
      pauseBtn.classList.remove('pause');
      pauseBtn.classList.add('play');
      return ;
    }
    displayTimeLeft(timeLeft);
  }, 1000);
}
function pauseTimer(event){
  if(isStarted === false){
    timer(wholeTime);
    isStarted = true;
    this.classList.remove('play');
    this.classList.add('pause');
    
    setterBtns.forEach(function(btn){
      btn.disabled = true;
      btn.style.opacity = 0.5;
    });
  }else if(isPaused){
    this.classList.remove('play');
    this.classList.add('pause');
    timer(timeLeft);
    isPaused = isPaused ? false : true
  }else{
    this.classList.remove('pause');
    this.classList.add('play');
    clearInterval(intervalTimer);
    isPaused = isPaused ? false : true ;
  }
}
function displayTimeLeft (timeLeft){ //displays time on the input
  let minutes = Math.floor(timeLeft / 60);
  let seconds = timeLeft % 60;
  let displayString = `${minutes < 10 ? '0' : ''}${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;
  displayOutput.textContent = displayString;
  update(timeLeft, wholeTime);
}
pauseBtn.addEventListener('click',pauseTimer);

const notificationAudio = document.getElementById('notificationAudio');

// ...

function timer(seconds) {
  let remainTime = Date.now() + seconds * 1000;
  displayTimeLeft(seconds);

  intervalTimer = setInterval(function () {
    timeLeft = Math.round((remainTime - Date.now()) / 1000);
    if (timeLeft < 0) {
      clearInterval(intervalTimer);
      isStarted = false;
      setterBtns.forEach(function (btn) {
        btn.disabled = false;
        btn.style.opacity = 1;
      });
      displayTimeLeft(wholeTime);
      pauseBtn.classList.remove('pause');
      pauseBtn.classList.add('play');
      // Play the notification audio when the timer reaches zero
      notificationAudio.play();
      return;
    }
    displayTimeLeft(timeLeft);
  }, 1000);
}
